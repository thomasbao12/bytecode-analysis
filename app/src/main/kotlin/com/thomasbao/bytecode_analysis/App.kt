/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.thomasbao.bytecode_analysis

import com.google.common.graph.GraphBuilder
import com.google.common.graph.MutableGraph
import com.google.common.graph.Graph as GuavaGraph
import org.apache.bcel.classfile.ClassParser
import org.apache.bcel.classfile.ConstantClass
import org.jgrapht.graph.DefaultDirectedGraph
import org.jgrapht.graph.DefaultEdge
import org.jgrapht.Graph
import org.jgrapht.alg.shortestpath.FloydWarshallShortestPaths
import org.jgrapht.traverse.BreadthFirstIterator
import java.nio.file.Files
import java.nio.file.Paths
import kotlin.io.path.absolutePathString
import kotlin.io.path.relativeTo


val AIRBNB_PACKAGE = "com/airbnb"

fun getConstantPoolClassRefs(filepath: String): Set<String> {
  val classParser = ClassParser(filepath)
  val javaClass = classParser.parse()
  val constantPool = javaClass.constantPool
  return constantPool.map { it as? ConstantClass }.filterNotNull().map {
    constantPool.getConstantUtf8(it.nameIndex).bytes
  }.toSet()
}

class Klass(val classPath: String, val classRefs: Set<String>)

fun getKlassFromFile(classPath: String, classRefs: Set<String>): Klass {
    return Klass(
      classPath,
      classRefs.filter { it.startsWith(AIRBNB_PACKAGE) && it != classPath }.toSet()
    )
}

fun main(args: Array<String>) {
    val inputDirPath = args[0]

    val sourcePackage = args[1]

    val g: Graph<String, DefaultEdge> = DefaultDirectedGraph<String, DefaultEdge>(DefaultEdge::class.java)
    val gg: MutableGraph<String> = GraphBuilder.directed().build()

    Files.walk(
        Paths.get(inputDirPath + "/" + AIRBNB_PACKAGE)
    ).forEach {
      if (it.fileName.toString().endsWith(".class")) {
        val classPath = it.toAbsolutePath().relativeTo(Paths.get(inputDirPath)).toString().removeSuffix(".class")
        println("parsing ${classPath}")

        val classRefs = getConstantPoolClassRefs(it.absolutePathString())



        g.addVertex(classPath)
        gg.addNode(classPath)
        classRefs.filter { it.startsWith(AIRBNB_PACKAGE) && it != classPath }.forEach {
          g.addVertex(it)
          g.addEdge(classPath, it)
          gg.addNode(it)
          gg.putEdge(classPath, it)
        }
      }
    }


  println("Graph has ${g.vertexSet().size} nodes and ${g.edgeSet().size} edges")

  val startingNodes = gg.nodes().filter {
    it.startsWith(sourcePackage)
  }.toSet()

  val reachableNodes = startingNodes.map {
    gg.successors(it)
  }.flatten().toSet()

  println("dora service has ${reachableNodes.size} reachable class files")





  //val floydWarshall = FloydWarshallShortestPaths(g)
  //println("ShortestsPaths count: ${floydWarshall.shortestPathsCount})")
}

